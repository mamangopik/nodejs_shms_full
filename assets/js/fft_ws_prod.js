var _0x3db92b = _0x8202; (function (_0x43efea, _0x3cfd0b) { var _0x16ff56 = _0x8202, _0x2422ac = _0x43efea(); while (!![]) { try { var _0xd02c42 = parseInt(_0x16ff56(0x269)) / 0x1 * (-parseInt(_0x16ff56(0x243)) / 0x2) + parseInt(_0x16ff56(0x223)) / 0x3 * (parseInt(_0x16ff56(0x241)) / 0x4) + parseInt(_0x16ff56(0x252)) / 0x5 + parseInt(_0x16ff56(0x251)) / 0x6 * (parseInt(_0x16ff56(0x270)) / 0x7) + -parseInt(_0x16ff56(0x20b)) / 0x8 * (-parseInt(_0x16ff56(0x210)) / 0x9) + parseInt(_0x16ff56(0x229)) / 0xa * (parseInt(_0x16ff56(0x267)) / 0xb) + -parseInt(_0x16ff56(0x25d)) / 0xc * (parseInt(_0x16ff56(0x246)) / 0xd); if (_0xd02c42 === _0x3cfd0b) break; else _0x2422ac['push'](_0x2422ac['shift']()); } catch (_0x14b3cd) { _0x2422ac['push'](_0x2422ac['shift']()); } } }(_0x2830, 0x2edd5)); var recorded_lbl = document[_0x3db92b(0x21c)](_0x3db92b(0x201)), btn_scroll = document[_0x3db92b(0x21c)](_0x3db92b(0x24d)), btn_download = document[_0x3db92b(0x21c)]('btn-download'), btn_axis = { 'x': document['getElementById']('btn-x'), 'y': document[_0x3db92b(0x21c)](_0x3db92b(0x211)), 'z': document[_0x3db92b(0x21c)](_0x3db92b(0x278)), 'toggle_x': 0x1, 'toggle_y': 0x1, 'toggle_z': 0x1 }, peaks1_table = document['getElementsByClassName'](_0x3db92b(0x262)), peaks2_table = document[_0x3db92b(0x1f4)](_0x3db92b(0x27b)), peaks3_table = document['getElementsByClassName']('peak-3-val-wrap'), peaks_table = { 'x': [peaks1_table[0x0], peaks2_table[0x0], peaks3_table[0x0]], 'y': [peaks1_table[0x1], peaks2_table[0x1], peaks3_table[0x1]], 'z': [peaks1_table[0x2], peaks2_table[0x2], peaks3_table[0x2]] }; const draggable = document['getElementById'](_0x3db92b(0x26f)); show_history_status = 0x1; var acc_data = { 'x': [], 'y': [], 'z': [], 'xkf': [], 'ykf': [], 'zkf': [], 'timestamp': [] }, mqtt, reconnectTimeout = 0x7d0, ws_addr = window[_0x3db92b(0x20c)][_0x3db92b(0x238)][_0x3db92b(0x24c)](_0x3db92b(0x21f), ''), host = ws_addr, port = 0x2329, last_log = 0x0, RSSI = 0x0, v_batt = 0x0, packet_length = 0x40; function _0x8202(_0xd850d7, _0x41d108) { var _0x283074 = _0x2830(); return _0x8202 = function (_0x820206, _0x25b629) { _0x820206 = _0x820206 - 0x1e7; var _0xc5ca66 = _0x283074[_0x820206]; return _0xc5ca66; }, _0x8202(_0xd850d7, _0x41d108); } const urlParams = new URLSearchParams(window['location'][_0x3db92b(0x281)]), topic = urlParams[_0x3db92b(0x22a)](_0x3db92b(0x1ee)), baseUrl = window[_0x3db92b(0x20c)][_0x3db92b(0x253)] + '//' + window[_0x3db92b(0x20c)][_0x3db92b(0x238)]; var python_ws_addr = _0x3db92b(0x1f8) + window[_0x3db92b(0x20c)][_0x3db92b(0x238)][_0x3db92b(0x24c)](_0x3db92b(0x21f), _0x3db92b(0x263)), acc_to_send = {}, acc_to_send_kf = {}, acc_to_send_status = 0x0, indeks = 0x0, window_area = 0x400 * 0x4, window_size = window_area, last_length = 0x0, fft_plot_heigh = 0xc8; const clientId = _0x3db92b(0x1f1) + Math[_0x3db92b(0x204)]()[_0x3db92b(0x261)](0x10)[_0x3db92b(0x25a)](0x2, 0x8), toolbar = { 'modeBarButtonsToRemove': ['autoScale2d'] }, hide_toolbar = { 'displayModeBar': ![] }; var layout = { 'height': 0x12c, 'autosize': !![], 'yaxis': { 'title': 'Acc' }, 'xaxis': { 'title': _0x3db92b(0x226) }, 'showlegend': !![], 'margin': { 'l': 0x32, 'r': 0x0, 't': 0x0, 'b': 0x32, 'pad': 0x0 } }, layout_fft = { 'x': { 'height': fft_plot_heigh, 'autosize': !![], 'yaxis': { 'title': _0x3db92b(0x264) }, 'xaxis': { 'title': _0x3db92b(0x1f2) }, 'annotations': [], 'showlegend': !![], 'margin': { 'l': 0x32, 'r': 0x0, 't': 0x0, 'b': 0x32, 'pad': 0x0 } }, 'y': { 'height': fft_plot_heigh, 'autosize': !![], 'yaxis': { 'title': 'mag' }, 'xaxis': { 'title': 'freq' }, 'annotations': [], 'showlegend': !![], 'margin': { 'l': 0x32, 'r': 0x0, 't': 0x0, 'b': 0x32, 'pad': 0x0 } }, 'z': { 'height': fft_plot_heigh, 'autosize': !![], 'yaxis': { 'title': _0x3db92b(0x264) }, 'xaxis': { 'title': 'freq' }, 'annotations': [], 'showlegend': !![], 'margin': { 'l': 0x32, 'r': 0x0, 't': 0x0, 'b': 0x32, 'pad': 0x0 } } }, layout_history = { 'height': 0x12c, 'title': 'Data\x20History\x20Time\x20Domain\x20VIBRASi', 'yaxis': { 'title': _0x3db92b(0x219) }, 'xaxis': { 'title': _0x3db92b(0x226) }, 'showlegend': !![], 'margin': { 'l': 0x32, 'r': 0x0, 't': 0x0, 'b': 0x32, 'pad': 0x0 } }, autoscroll_status = 0x1, interpolate_status = 0x1; const findTopPeaks = async (_0x7c0a0b, _0x34e155) => { var _0x159a9a = _0x3db92b; return max_x = Math[_0x159a9a(0x224)][_0x159a9a(0x1fe)](null, _0x7c0a0b), max_y = Math[_0x159a9a(0x224)][_0x159a9a(0x1fe)](null, _0x34e155), max_freq = _0x7c0a0b[_0x34e155[_0x159a9a(0x260)](max_y)], { 'x': max_freq, 'y': max_y }; }, update_history = async () => { var _0x77205f = _0x3db92b, _0x2ad629 = { 'y': acc_data['x'], 'text': acc_data[_0x77205f(0x1fb)], 'type': 'scatter', 'mode': _0x77205f(0x220), 'name': 'x' }, _0x4a9561 = { 'y': acc_data['y'], 'text': acc_data[_0x77205f(0x1fb)], 'type': _0x77205f(0x1f6), 'mode': 'lines', 'name': 'y' }, _0xf18f92 = { 'y': acc_data['z'], 'text': acc_data[_0x77205f(0x1fb)], 'type': _0x77205f(0x1f6), 'mode': _0x77205f(0x220), 'name': 'z' }; data = [_0x2ad629, _0x4a9561, _0xf18f92], show_history_status == 0x1 && Plotly[_0x77205f(0x217)](_0x77205f(0x286), data, layout_history); }, get_peak_label = (_0x21cc32, _0x42befb, _0x2bc241) => { var _0x292e96 = _0x3db92b; let _0x5244e0 = '<b\x20style=\x22font-size:16px\x22>' + (_0x292e96(0x221) + _0x2bc241) + _0x292e96(0x1f7) + _0x292e96(0x216) + '<b\x20style=\x22font-size:12px\x22>' + (_0x21cc32 + 'Hz') + _0x292e96(0x1f7) + '<br>' + _0x292e96(0x1e7) + (_0x42befb + _0x292e96(0x23e)) + _0x292e96(0x1f7); return _0x5244e0; }, draw_fft = async (_0x15c3d9, _0x2a5b35, _0x3190ee, _0xda8122) => { var _0x2db7e2 = _0x3db92b; let _0x370336 = 0x1; _0xda8122[_0x2db7e2(0x230)](_0x2765b6 => { var _0x31b0de = _0x2db7e2; const _0x37d1ab = { 'x': parseFloat(_0x2765b6[0x0]), 'y': parseFloat(_0x2765b6[0x1]), 'text': get_peak_label(parseFloat(_0x2765b6[0x0])['toFixed'](0x4), parseFloat(_0x2765b6[0x1])[_0x31b0de(0x20a)](0x4), _0x370336), 'showarrow': !![], 'arrowhead': 0x2, 'ax': 0x0, 'ay': -0x32, 'font': { 'family': 'Courier\x20New,\x20monospace', 'size': 0x10, 'color': '#ffffff' }, 'align': 'center', 'bordercolor': _0x31b0de(0x279), 'borderwidth': 0x2, 'borderpad': 0x4, 'bgcolor': _0x3190ee[_0x31b0de(0x272)]['color'], 'opacity': 0.7 }; _0x2a5b35[_0x31b0de(0x27d)][_0x31b0de(0x23d)](_0x37d1ab), _0x370336++; }), Plotly[_0x2db7e2(0x217)](_0x15c3d9, [_0x3190ee], _0x2a5b35, hide_toolbar, { 'staticPlot': !![] }), _0x2a5b35['annotations'] = []; }, push_acc_data = async _0x18d2b3 => { var _0x3ffbd8 = _0x3db92b; RSSI = _0x18d2b3[_0x3ffbd8(0x255)], v_batt = _0x18d2b3['battery_voltage']; _0x18d2b3[_0x3ffbd8(0x271)] && _0x18d2b3[_0x3ffbd8(0x271)][_0x3ffbd8(0x230)](_0x29f2d7 => { var _0x201db6 = _0x3ffbd8; acc_data['x'][_0x201db6(0x23d)](parseFloat(_0x29f2d7)); }); _0x18d2b3[_0x3ffbd8(0x1f9)] && _0x18d2b3['y_values'][_0x3ffbd8(0x230)](_0x1c816e => { var _0xa5035b = _0x3ffbd8; acc_data['y'][_0xa5035b(0x23d)](parseFloat(_0x1c816e)); }); _0x18d2b3[_0x3ffbd8(0x27f)] && _0x18d2b3[_0x3ffbd8(0x27f)][_0x3ffbd8(0x230)](_0x4eb73d => { var _0x106b42 = _0x3ffbd8; acc_data['z'][_0x106b42(0x23d)](parseFloat(_0x4eb73d)); }); _0x18d2b3[_0x3ffbd8(0x274)] && _0x18d2b3[_0x3ffbd8(0x274)][_0x3ffbd8(0x230)](_0x5381db => { acc_data['xkf']['push'](parseFloat(_0x5381db)); }); _0x18d2b3[_0x3ffbd8(0x258)] && _0x18d2b3['ykf_values'][_0x3ffbd8(0x230)](_0x367cd6 => { var _0x670c12 = _0x3ffbd8; acc_data[_0x670c12(0x285)]['push'](parseFloat(_0x367cd6)); }); _0x18d2b3[_0x3ffbd8(0x23f)] && _0x18d2b3[_0x3ffbd8(0x23f)][_0x3ffbd8(0x230)](_0x366ec6 => { var _0x1d22ff = _0x3ffbd8; acc_data['zkf'][_0x1d22ff(0x23d)](parseFloat(_0x366ec6)); }); _0x18d2b3[_0x3ffbd8(0x1fb)] && _0x18d2b3[_0x3ffbd8(0x1fb)][_0x3ffbd8(0x230)](_0x58f7ef => { var _0x4a4e60 = _0x3ffbd8; timestamp = _0x58f7ef, date = new Date(timestamp * 0x3e8); let _0x296a4b = Intl[_0x4a4e60(0x21d)]()[_0x4a4e60(0x212)]()[_0x4a4e60(0x249)], _0x44c9b1 = new Intl[(_0x4a4e60(0x21d))](_0x4a4e60(0x26c), { 'timeZone': _0x296a4b, 'year': 'numeric', 'month': _0x4a4e60(0x242), 'day': _0x4a4e60(0x242), 'hour': _0x4a4e60(0x242), 'minute': _0x4a4e60(0x242), 'second': _0x4a4e60(0x242), 'hour12': ![] }); formattedDateTime = _0x44c9b1['format'](date); let _0x18821c = String(timestamp)[_0x4a4e60(0x24a)]('.')[0x1]; _0x18821c !== undefined && (formattedDateTime += '.' + _0x18821c), acc_data[_0x4a4e60(0x1fb)][_0x4a4e60(0x23d)](formattedDateTime); }); if (mqtt['isConnected']()) { acc_to_send[_0x3ffbd8(0x214)] = 0x5; const _0x1ad884 = new Paho['MQTT'][(_0x3ffbd8(0x20e))](JSON[_0x3ffbd8(0x215)](acc_to_send)); _0x1ad884[_0x3ffbd8(0x26e)] = _0x3ffbd8(0x227), mqtt[_0x3ffbd8(0x21a)](_0x1ad884), acc_to_send_kf[_0x3ffbd8(0x214)] = 0x5; const _0x243dea = new Paho[(_0x3ffbd8(0x280))]['Message'](JSON[_0x3ffbd8(0x215)](acc_to_send_kf)); _0x243dea['destinationName'] = _0x3ffbd8(0x222), mqtt[_0x3ffbd8(0x21a)](_0x243dea); } else console[_0x3ffbd8(0x284)]('MQTT\x20client\x20is\x20not\x20connected'); }, download = async () => { var _0x289f1a = _0x3db92b, _0x59aab9 = _0x289f1a(0x22e); for (var _0x1e9c36 = 0x0; _0x1e9c36 < acc_data['x'][_0x289f1a(0x1eb)]; _0x1e9c36++) { _0x59aab9 += _0x1e9c36 + 0x1 + ',' + acc_data['x'][_0x1e9c36] + ',' + acc_data['y'][_0x1e9c36] + ',' + acc_data['z'][_0x1e9c36] + ',' + acc_data[_0x289f1a(0x1fb)][_0x1e9c36] + '\x0a'; } var _0xb1634d = new Blob([_0x59aab9], { 'type': _0x289f1a(0x233) }), _0x17f127 = document[_0x289f1a(0x250)]('a'); _0x17f127[_0x289f1a(0x275)] = window[_0x289f1a(0x1fc)]['createObjectURL'](_0xb1634d), _0x17f127[_0x289f1a(0x1e9)] = acc_data[_0x289f1a(0x1fb)][acc_data['x'][_0x289f1a(0x1eb)] - 0x1] + '_acc_data.csv', _0x17f127[_0x289f1a(0x1ec)][_0x289f1a(0x202)] = _0x289f1a(0x1e8), document[_0x289f1a(0x244)][_0x289f1a(0x22b)](_0x17f127), _0x17f127[_0x289f1a(0x20f)](), document['body'][_0x289f1a(0x273)](_0x17f127); }; mqtt = new Paho[(_0x3db92b(0x280))][(_0x3db92b(0x283))](host, port, clientId), mqtt[_0x3db92b(0x239)] = onMessageArrived, mqtt[_0x3db92b(0x1f3)] = onConnectionLost; var options = { 'timeout': 0x3, 'onSuccess': onConnect }; mqtt['connect'](options); function onConnect() { var _0x8ac697 = _0x3db92b; console['log'](_0x8ac697(0x237)), mqtt['subscribe']('/shms/convert/fft/' + clientId); } function onFailure(_0x4bcbfc) { var _0x464ce6 = _0x3db92b; console[_0x464ce6(0x284)]('Failed\x20to\x20connect\x20to\x20MQTT\x20broker:', _0x4bcbfc[_0x464ce6(0x268)]), setTimeout(() => { var _0x3e6a6f = _0x464ce6; mqtt[_0x3e6a6f(0x25b)]({ 'onSuccess': onConnect, 'onFailure': onFailure }); }, 0x1388); } function onConnectionLost(_0xd94ac9) { var _0x5cc94d = _0x3db92b; _0xd94ac9[_0x5cc94d(0x23a)] !== 0x0 && (console[_0x5cc94d(0x284)](_0x5cc94d(0x277), _0xd94ac9[_0x5cc94d(0x268)]), setTimeout(() => { var _0x118014 = _0x5cc94d; mqtt[_0x118014(0x25b)]({ 'onSuccess': onConnect, 'onFailure': onFailure }); }, 0x3e8)); } function onMessageArrived(_0x4587ed) { var _0x35c050 = _0x3db92b; let _0x26719d = { 'topic': _0x4587ed[_0x35c050(0x26e)], 'message': _0x4587ed[_0x35c050(0x26d)] }, _0x1ce68e = JSON[_0x35c050(0x231)](_0x26719d[_0x35c050(0x22d)]), _0x4e977e = _0x1ce68e[_0x35c050(0x25c)], _0x38a6dc = _0x1ce68e[_0x35c050(0x22f)], _0x5b9622 = _0x1ce68e['topic_in']; console[_0x35c050(0x213)](_0x5b9622); var _0x3cdddb = { 'x': _0x4e977e['x'][_0x35c050(0x203)], 'y': _0x4e977e['x'][_0x35c050(0x1ed)], 'mode': _0x35c050(0x220), 'type': 'scatter', 'name': 'x', 'line': { 'color': _0x35c050(0x232), 'width': 0x2 } }, _0xe96142 = { 'x': _0x4e977e['y'][_0x35c050(0x203)], 'y': _0x4e977e['y'][_0x35c050(0x1ed)], 'mode': _0x35c050(0x220), 'type': 'scatter', 'name': 'y', 'line': { 'color': _0x35c050(0x24e), 'width': 0x2 } }, _0x9cd9e1 = { 'x': _0x4e977e['z'][_0x35c050(0x203)], 'y': _0x4e977e['z']['magnitude'], 'mode': 'lines', 'type': 'scatter', 'name': 'z', 'line': { 'color': _0x35c050(0x200), 'width': 0x2 } }; if (_0x5b9622 == '/shms/convert/acc') new Promise(() => { var _0x290045 = _0x35c050; draw_fft(_0x290045(0x254), layout_fft['x'], _0x3cdddb, _0x38a6dc['x']); }), new Promise(() => { var _0x568fd1 = _0x35c050; draw_fft(_0x568fd1(0x206), layout_fft['y'], _0xe96142, _0x38a6dc['y']); }), new Promise(() => { var _0x2a8428 = _0x35c050; draw_fft(_0x2a8428(0x20d), layout_fft['x'], _0x9cd9e1, _0x38a6dc['z']); }); else _0x5b9622 == _0x35c050(0x222) && (new Promise(() => { var _0x5a4950 = _0x35c050; _0x3cdddb[_0x5a4950(0x282)] = _0x5a4950(0x208), draw_fft(_0x5a4950(0x21e), layout_fft['x'], _0x3cdddb, _0x38a6dc['x']); }), new Promise(() => { var _0x478aac = _0x35c050; _0xe96142[_0x478aac(0x282)] = 'Y\x20KF', draw_fft(_0x478aac(0x26b), layout_fft['y'], _0xe96142, _0x38a6dc['y']); }), new Promise(() => { var _0x147c27 = _0x35c050; _0x9cd9e1[_0x147c27(0x282)] = _0x147c27(0x236), draw_fft('fft_graph_z_kf', layout_fft['x'], _0x9cd9e1, _0x38a6dc['z']); })); } var socket_io = io[_0x3db92b(0x25b)](baseUrl); socket_io['on'](topic, async _0x459311 => { var _0x68b4b2 = _0x3db92b; console[_0x68b4b2(0x213)](Intl[_0x68b4b2(0x21d)]()['resolvedOptions']()[_0x68b4b2(0x249)]), data_acc = _0x459311, last_log = data_acc[_0x68b4b2(0x257)], packet_length = data_acc[_0x68b4b2(0x276)], data_acc['x_values'] && (push_acc_data(data_acc), acc_to_send['fs'] = data_acc[_0x68b4b2(0x1f0)], acc_to_send[_0x68b4b2(0x265)] = clientId, acc_to_send_kf['fs'] = data_acc['sampling_frequency'], acc_to_send_kf[_0x68b4b2(0x265)] = clientId); }), socket_io['on'](topic + '_info', async _0x156e41 => { var _0x34178b = _0x3db92b; last_log = _0x156e41, console['log'](_0x34178b(0x27e), new Date(_0x156e41)); }); let history_beacon = setInterval(async () => { var _0x235251 = _0x3db92b; try { update_history(); } catch (_0x4c97ed) { console[_0x235251(0x213)](_0x4c97ed); } }, 0x2710), animation_pointer = 0x0; function _0x2830() { var _0x35812d = ['<br>', 'newPlot', 'mousedown', 'Acc', 'send', 'Recorded\x20data:\x20', 'getElementById', 'DateTimeFormat', 'fft_graph_x_kf', ':7777', 'lines', 'Peak', '/shms/convert/acc_kf', '591VvtbEs', 'max', '</b>\x0a\x20\x20\x20\x20\x20\x20\x20\x20', 'Waktu', '/shms/convert/acc', 'mouseup', '1452790jBtVcx', 'get', 'appendChild', 'Show', 'message', 'id,x,y,z,date_time(UTC+0)\x0a', 'peaks', 'forEach', 'parse', 'rgb(0,\x200,\x20255)', 'text/csv', '\x20to\x20', 'top', 'Z\x20KF', 'Connected', 'host', 'onMessageArrived', 'errorCode', 'clientX', 'cursor', 'push', '\x20mG', 'zkf_values', 'toggle_y', '412oBDjet', '2-digit', '6170hAHPIF', 'body', '</b>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20</br>Last\x20Logged:\x20<b>', '546bLMADT', 'slice', 'clientY', 'timeZone', 'split', 'innerHTML', 'replace', 'btn-autoscroll', 'rgb(0,\x20255,\x200)', 'toggle_x', 'createElement', '85314jMpbui', '936995dcjzEA', 'protocol', 'fft_graph_x', 'signal_strength', 'btn\x20btn-primary\x20btn-md', 'last_log', 'ykf_values', 'xkf', 'substr', 'connect', 'data', '111732UeqfWF', 'className', 'addEventListener', 'indexOf', 'toString', 'peak-1-val-wrap', ':5556', 'mag', 'cid', 'block', '22SHQpLy', 'errorMessage', '3JlcdpO', 'getBoundingClientRect', 'fft_graph_y_kf', 'en-US', 'payloadString', 'destinationName', 'peak-info-popup', '28NadmGL', 'x_values', 'line', 'removeChild', 'xkf_values', 'href', 'packet_size', 'Connection\x20lost:', 'btn-z', '#c7c7c7', 'onclick', 'peak-2-val-wrap', 'dB</b>,\x20Battery\x20Voltage:\x20<b>', 'annotations', 'waktuu', 'z_values', 'MQTT', 'search', 'name', 'Client', 'error', 'ykf', 'acc_history', 'something\x20error:', '</b>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20</br>Last\x20Logged:\x20<b>Dissabled</b>\x0a\x20\x20\x20\x20\x20\x20\x20\x20', '<b\x20style=\x22font-size:12px\x22>', 'none', 'download', 'grabbing', 'length', 'style', 'magnitude', 'topic', 'grab', 'sampling_frequency', 'realtime_acc_publisher_', 'freq', 'onConnectionLost', 'getElementsByClassName', 'acc_graph_kalman', 'scatter', '</b>', 'ws://', 'y_values', 'toggle_z', 'timestamp', 'URL', 'btn\x20btn-disable\x20btn-md', 'apply', 'mousemove', 'rgb(255,\x200,\x200)', 'recorded', 'display', 'frequency', 'random', 'left', 'fft_graph_y', '</br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20RSSI:\x20<b>', 'X\x20KF', 'btn-toggle-history-show', 'toFixed', '80XUDVlm', 'location', 'fft_graph_z', 'Message', 'click', '33435HUWVTM', 'btn-y', 'resolvedOptions', 'log', 'peaks_req', 'stringify']; _0x2830 = function () { return _0x35812d; }; return _0x2830(); } const update_recv_data_info = async _0x586447 => { var _0x140073 = _0x3db92b; try { new Promise(() => { var _0x2794eb = _0x8202; last_log != 0x0 ? recorded_lbl[_0x2794eb(0x24b)] = _0x2794eb(0x21b) + acc_data['x'][_0x2794eb(0x1eb)] + ',\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20Data\x20in\x20plot:\x20' + (0x0 + indeks) + _0x2794eb(0x234) + (window_area + indeks) + '</br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20RSSI:\x20<b>' + RSSI + _0x2794eb(0x27c) + v_batt + _0x2794eb(0x245) + new Date(last_log) + _0x2794eb(0x225) : recorded_lbl[_0x2794eb(0x24b)] = _0x2794eb(0x21b) + acc_data['x'][_0x2794eb(0x1eb)] + ',\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20Data\x20in\x20plot:\x20' + (0x0 + indeks) + _0x2794eb(0x234) + (window_area + indeks) + _0x2794eb(0x207) + RSSI + _0x2794eb(0x27c) + v_batt + _0x2794eb(0x288); }); } catch (_0x24514c) { console[_0x140073(0x284)](_0x24514c); } }, animate_acc = async _0x3db44a => { var _0x13bf0a = _0x3db92b; try { var _0x53eddb = { 'y': acc_data['x'][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'text': acc_data[_0x13bf0a(0x1fb)]['slice'](_0x3db44a, _0x3db44a + window_size), 'type': _0x13bf0a(0x1f6), 'mode': _0x13bf0a(0x220), 'name': 'x', 'line': { 'color': _0x13bf0a(0x232), 'width': 0x1 } }, _0x31f4df = { 'y': acc_data['y'][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'text': acc_data[_0x13bf0a(0x1fb)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'type': _0x13bf0a(0x1f6), 'mode': _0x13bf0a(0x220), 'name': 'y', 'line': { 'color': 'rgb(0,\x20255,\x200)', 'width': 0x1 } }, _0x2644b2 = { 'y': acc_data['z'][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'text': acc_data[_0x13bf0a(0x1fb)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'type': 'scatter', 'mode': _0x13bf0a(0x220), 'name': 'z', 'line': { 'color': _0x13bf0a(0x200), 'width': 0x1 } }, _0x9ea085 = { 'y': acc_data[_0x13bf0a(0x259)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'text': acc_data[_0x13bf0a(0x1fb)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'type': _0x13bf0a(0x1f6), 'mode': _0x13bf0a(0x220), 'name': 'x', 'line': { 'color': _0x13bf0a(0x232), 'width': 0x1 } }, _0x274cd7 = { 'y': acc_data[_0x13bf0a(0x285)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'text': acc_data[_0x13bf0a(0x1fb)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'type': 'scatter', 'mode': _0x13bf0a(0x220), 'name': 'y', 'line': { 'color': _0x13bf0a(0x24e), 'width': 0x1 } }, _0x7d9b13 = { 'y': acc_data['zkf']['slice'](_0x3db44a, _0x3db44a + window_size), 'text': acc_data[_0x13bf0a(0x1fb)][_0x13bf0a(0x247)](_0x3db44a, _0x3db44a + window_size), 'type': _0x13bf0a(0x1f6), 'mode': _0x13bf0a(0x220), 'name': 'z', 'line': { 'color': _0x13bf0a(0x200), 'width': 0x1 } }, _0x786d93 = [], _0x37c589 = []; if (btn_axis['toggle_x'] == 0x1) _0x786d93[_0x13bf0a(0x23d)](_0x53eddb); if (btn_axis[_0x13bf0a(0x240)] == 0x1) _0x786d93[_0x13bf0a(0x23d)](_0x31f4df); if (btn_axis['toggle_z'] == 0x1) _0x786d93[_0x13bf0a(0x23d)](_0x2644b2); if (btn_axis[_0x13bf0a(0x24f)] == 0x1) _0x37c589[_0x13bf0a(0x23d)](_0x9ea085); if (btn_axis[_0x13bf0a(0x240)] == 0x1) _0x37c589[_0x13bf0a(0x23d)](_0x274cd7); if (btn_axis[_0x13bf0a(0x1fa)] == 0x1) _0x37c589[_0x13bf0a(0x23d)](_0x7d9b13); acc_to_send['x'] = _0x53eddb['y'], acc_to_send['y'] = _0x31f4df['y'], acc_to_send['z'] = _0x2644b2['y'], acc_to_send_kf['x'] = _0x9ea085['y'], acc_to_send_kf['y'] = _0x274cd7['y'], acc_to_send_kf['z'] = _0x7d9b13['y'], acc_to_send[_0x13bf0a(0x214)] = 0x3, acc_to_send_status = 0x1, Plotly[_0x13bf0a(0x217)]('acc_graph', _0x786d93, layout), Plotly[_0x13bf0a(0x217)](_0x13bf0a(0x1f5), _0x37c589, layout); if (_0x2644b2['y']['length'] >= window_size) { let _0x4d744f = acc_data[_0x13bf0a(0x1fb)]['length'] - animation_pointer, _0x241b40 = parseInt(window_size); if (_0x4d744f > _0x241b40) { let _0x2d5486 = _0x4d744f - _0x241b40; animation_pointer += parseInt(_0x2d5486 / 0xa); } else animation_pointer += 0x1; } } catch (_0x1b6436) { console[_0x13bf0a(0x284)](_0x13bf0a(0x287), _0x1b6436); } }; setInterval(() => { acc_data['x']['length'] > animation_pointer && animate_acc(animation_pointer); }, 0x32), setInterval(() => { update_recv_data_info(animation_pointer); }, 0x3e8), btn_scroll[_0x3db92b(0x27a)] = () => { var _0x180a59 = _0x3db92b; autoscroll_status === 0x1 ? (autoscroll_status = 0x0, btn_scroll[_0x180a59(0x25e)] = _0x180a59(0x1fd)) : (autoscroll_status = 0x1, btn_scroll[_0x180a59(0x25e)] = _0x180a59(0x256)); }, btn_download['onclick'] = async () => { var _0x401d01 = _0x3db92b; acc_data['x'][_0x401d01(0x1eb)] > 0xa && download(); }, btn_axis['x']['onclick'] = () => { var _0x2629bb = _0x3db92b; btn_axis[_0x2629bb(0x24f)] === 0x1 ? (btn_axis['toggle_x'] = 0x0, btn_axis['x']['className'] = _0x2629bb(0x1fd)) : (btn_axis[_0x2629bb(0x24f)] = 0x1, btn_axis['x']['className'] = 'btn\x20btn-primary\x20btn-md'); }, btn_axis['y'][_0x3db92b(0x27a)] = () => { var _0x34d644 = _0x3db92b; btn_axis['toggle_y'] === 0x1 ? (btn_axis[_0x34d644(0x240)] = 0x0, btn_axis['y'][_0x34d644(0x25e)] = 'btn\x20btn-disable\x20btn-md') : (btn_axis[_0x34d644(0x240)] = 0x1, btn_axis['y'][_0x34d644(0x25e)] = _0x34d644(0x256)); }, btn_axis['z'][_0x3db92b(0x27a)] = () => { var _0x4e4d81 = _0x3db92b; btn_axis[_0x4e4d81(0x1fa)] === 0x1 ? (btn_axis[_0x4e4d81(0x1fa)] = 0x0, btn_axis['z'][_0x4e4d81(0x25e)] = _0x4e4d81(0x1fd)) : (btn_axis[_0x4e4d81(0x1fa)] = 0x1, btn_axis['z'][_0x4e4d81(0x25e)] = _0x4e4d81(0x256)); }; let isDragging = ![], offsetX, offsetY; draggable[_0x3db92b(0x25f)](_0x3db92b(0x218), _0x2218eb => { var _0x1466f8 = _0x3db92b; isDragging = !![], offsetX = _0x2218eb[_0x1466f8(0x23b)] - draggable['getBoundingClientRect']()['left'], offsetY = _0x2218eb[_0x1466f8(0x248)] - draggable[_0x1466f8(0x26a)]()[_0x1466f8(0x235)], draggable[_0x1466f8(0x1ec)][_0x1466f8(0x23c)] = _0x1466f8(0x1ea); }), document[_0x3db92b(0x25f)](_0x3db92b(0x1ff), async _0xb1ad6 => { var _0x5d5e0f = _0x3db92b; isDragging && (draggable[_0x5d5e0f(0x1ec)][_0x5d5e0f(0x205)] = _0xb1ad6[_0x5d5e0f(0x23b)] - offsetX + 'px', draggable['style']['top'] = _0xb1ad6[_0x5d5e0f(0x248)] - offsetY + 'px'); }), document[_0x3db92b(0x25f)](_0x3db92b(0x228), async () => { var _0x57ca9d = _0x3db92b; isDragging == !![] && (draggable[_0x57ca9d(0x1ec)][_0x57ca9d(0x23c)] = _0x57ca9d(0x1ef)), isDragging = ![]; }), document[_0x3db92b(0x21c)](_0x3db92b(0x209))['onclick'] = () => { var _0x564fb0 = _0x3db92b; show_history_status == 0x1 ? (show_history_status = 0x0, document[_0x564fb0(0x21c)](_0x564fb0(0x209))[_0x564fb0(0x24b)] = _0x564fb0(0x22c), document['getElementById']('acc_history')[_0x564fb0(0x1ec)][_0x564fb0(0x202)] = _0x564fb0(0x1e8)) : (show_history_status = 0x1, document[_0x564fb0(0x21c)](_0x564fb0(0x209))[_0x564fb0(0x24b)] = 'Hide', document[_0x564fb0(0x21c)](_0x564fb0(0x286))[_0x564fb0(0x1ec)][_0x564fb0(0x202)] = _0x564fb0(0x266)), console['log'](show_history_status); };